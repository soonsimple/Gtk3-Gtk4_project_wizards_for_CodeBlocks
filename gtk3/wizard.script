////////////////////////////////////////////////////////////////////////////////
//
// GTK3 project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
GtkPathDefault    <- _T("$(#gtk)");
GtkPathDefaultInc <- _T("$(#gtk.include)");
GtkPathDefaultLib <- _T("$(#gtk.lib)");
GtkPath <- _T("");

function BeginWizard()
{
    local intro_msg = _("Welcome to the new GTK project wizard!\n") +
                      _("This wizard will guide you to create a new GTK project\nusing the GTK cross-platform GUI toolkit\n\n") +
                      _("When you're ready to proceed, please click \"Next\"...");

    Wizard.AddInfoPage(_T("GtkIntro"), intro_msg);
    Wizard.AddProjectPathPage();
    if (PLATFORM == PLATFORM_MSW)
    {
        local gtkpath_msg = _("Please select the location of GTK on your computer.\n") +
                            _("This is the top-level folder where GTK was installed.\n") +
                            _("To help you, this folder must contain the subfolders\n\"include\" and \"lib\".\n\n") +
                            _("You can also use a global variable, p.e. $(#gtk)\n");

        Wizard.AddGenericSelectPathPage(_T("GtkPath"), gtkpath_msg, _("GTK's location:"), GtkPathDefault);
    }


    Wizard.AddCompilerPage(_T(""), _T("gcc*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// Gtk's path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_GtkPath(fwd)
{
    if (fwd)
    {
        local dir         = Wizard.GetTextControlValue(_T("txtFolder")); // txtFolder is the text control in GenericSelectPathPage
        local dir_nomacro = VerifyDirectory(dir);

        if (dir_nomacro.IsEmpty())
            return false;

        // verify include dependencies
        local dir_nomacro_inc = GetCompilerIncludeDir(dir, GtkPathDefault, GtkPathDefaultInc);
        if (dir_nomacro_inc.IsEmpty())
            return false;
        if (!VerifyFile(dir_nomacro_inc + wxFILE_SEP_PATH + _T("gtk-3.0") + wxFILE_SEP_PATH +_T("gtk"), _T("gtk.h"), _("GTK's include")))
            return false;

        GtkPath = dir; // Remember the original selection.

        local is_macro = _T("");

        // try to resolve the include directory as macro
        is_macro = GetCompilerIncludeMacro(dir, GtkPathDefault, GtkPathDefaultInc);
        if (is_macro.IsEmpty())
        {
            // not possible -> use the real inc path we had computed instead
            GtkPathDefaultInc = dir_nomacro_inc;
        }

        // try to resolve the library directory as macro
        is_macro = GetCompilerLibMacro(dir, GtkPathDefault, GtkPathDefaultLib);
        if (is_macro.IsEmpty())
        {
            // not possible -> use the real lib path we had computed instead
            GtkPathDefaultLib = dir_nomacro_lib;
        }
    }
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// Gtk's version page (For *nix users)
////////////////////////////////////////////////////////////////////////////////

function OnLeave_GtkVersionPage(fwd)
{
    if (fwd)
    {
        GtkVersion = Wizard.GetListboxSelection(_T("GenericChoiceList"));
    }
    return true;
}

// return the files this project contains
function GetFilesDir()
{
    return _T("gtk3/files");
}

// setup the already created project
function SetupProject(project)
{
    if (PLATFORM == PLATFORM_MSW)
    {
        project.AddIncludeDir(GtkPathDefaultInc);
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("gtk-3.0"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("atk-1.0"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("cairo"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("glib-2.0"));
        project.AddIncludeDir(GtkPathDefaultLib + wxFILE_SEP_PATH + _T("glib-2.0") + wxFILE_SEP_PATH + _T("include"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("pango-1.0"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("harfbuzz"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("freetype2"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("gdk-pixbuf-2.0"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("libpng16"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("fribidi"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("pixman-1"));
        project.AddIncludeDir(GtkPathDefaultInc + wxFILE_SEP_PATH + _T("webp"));

        project.AddLibDir(GtkPathDefaultLib);
        
        project.AddCompilerOption(_T("-DLIBDEFLATE_DLL"))

        // add link libraries
        project.AddLinkLib(_T("gtk-3"));
        project.AddLinkLib(_T("gdk-3"));
        project.AddLinkLib(_T("z"));
        project.AddLinkLib(_T("gdi32"));
        project.AddLinkLib(_T("imm32"));
        project.AddLinkLib(_T("shell32"));
        project.AddLinkLib(_T("ole32"));
        project.AddLinkLib(_T("uuid"));
        project.AddLinkLib(_T("winmm"));
        project.AddLinkLib(_T("dwmapi"));
        project.AddLinkLib(_T("setupapi"));
        project.AddLinkLib(_T("cfgmgr32"));
        project.AddLinkLib(_T("hid"));
        project.AddLinkLib(_T("winspool"));
        project.AddLinkLib(_T("comctl32"));
        project.AddLinkLib(_T("comdlg32"));
        project.AddLinkLib(_T("pangowin32-1.0"));
        project.AddLinkLib(_T("pangocairo-1.0"));
        project.AddLinkLib(_T("pango-1.0"));
        project.AddLinkLib(_T("harfbuzz"));
        project.AddLinkLib(_T("atk-1.0"));
        project.AddLinkLib(_T("gdk_pixbuf-2.0"));
        project.AddLinkLib(_T("cairo-gobject"));
        project.AddLinkLib(_T("cairo"));
        project.AddLinkLib(_T("gio-2.0"));
        project.AddLinkLib(_T("gobject-2.0"));
        project.AddLinkLib(_T("glib-2.0"));
        project.AddLinkLib(_T("intl"));
        
    }

    // enable compiler warnings (project-wide)
    WarningsOn(project, Wizard.GetCompilerID());

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable generation of debugging symbols for target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    return true;
}
